name: build test

on:
  push:
    paths-ignore:
      - '*.md'
  pull_request:
    branches: [ master ]

jobs:
  build-linux:
    name: native build in linux
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: build ffmpeg
        run: |
          while sleep 300; do echo "=====[ $SECONDS seconds still running ]====="; done &
          SKIPINSTALL=yes VERBOSE=yes ./build-ffmpeg --build
          kill %1

      - name: check shared library
        run: |
          ldd ./workspace/bin/ffmpeg
          ldd ./workspace/bin/ffprobe

      - name: test run ffmepg
        run: |
          ./workspace/bin/ffmpeg --help

      - name: clean up
        run: |
          ./build-ffmpeg --cleanup

  build-macos:
    name: native build in macos
    runs-on: macos-10.15
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: build ffmpeg
        run: |
          while sleep 300; do echo "=====[ $SECONDS seconds still running ]====="; done &
          SKIPINSTALL=yes VERBOSE=yes ./build-ffmpeg --build
          kill %1

      - name: check shared library
        run: |
          otool -L ./workspace/bin/ffmpeg
          otool -L ./workspace/bin/ffprobe

      - name: test run ffmepg
        run: |
          ./workspace/bin/ffmpeg --help

      - name: clean up
        run: |
          ./build-ffmpeg --cleanup

  build-windows:
    name: native build in windows
    runs-on: windows-2019
    env:
      MSYSTEM: MINGW64
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: add path
        run: |
          echo "C:\msys64\mingw64\bin;C:\msys64\usr\local\bin;C:\msys64\usr\bin;C:\msys64\bin;" >> $GITHUB_PATH

      - name: Install requirements
        run: |
          pacman -S --noconfirm --needed --noprogressbar base-devel compression
          pacman -S --noconfirm --needed --noprogressbar mingw-w64-x86_64-cmake mingw-w64-x86_64-toolchain

      - name: build ffmpeg
        run: |
          bash export SKIPINSTALL=yes; export VERBOSE=yes; ./build-ffmpeg --build

      - name: check shared library
        run: |
          ldd ./workspace/bin/ffmpeg
          ldd ./workspace/bin/ffprobe

      - name: test run ffmepg
        run: |
          ./workspace/bin/ffmpeg --help

      - name: clean up
        run: |
          bash ./build-ffmpeg --cleanup

  build-docker:
    name: build in docker
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: pull base image
        id: ubuntu_pull
        run: |
          docker pull ubuntu:20.04

      - name: run if ubuntu_pull failed
        if: failure() && steps.ubuntu_pull.outcome == 'failure'
        run: |
          docker pull ubuntu:20.04

      - name: build ffmpeg
        run: |
          docker build -t ffmpeg:ubuntu -f Dockerfile .

      - name: test run ffmepg
        run: |
          docker run --rm ffmpeg:ubuntu

  build-cuda-docker:
    name: build in docker with cuda
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: pull base image
        id: cuda_ubuntu_pull
        run: |
          docker pull nvidia/cuda:11.1-devel-ubuntu20.04

      - name: run if cuda_ubuntu_pull failed
        if: failure() && steps.cuda_ubuntu_pull.outcome == 'failure'
        run: |
            docker pull nvidia/cuda:11.1-devel-ubuntu20.04

      - name: build ffmpeg
        run: |
          docker build -t ffmpeg:cuda -f cuda-ubuntu.dockerfile .

      - name: test run ffmepg
        run: |
          docker run --rm ffmpeg:cuda
